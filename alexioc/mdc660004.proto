#   streamDevice protocol file for MDC660004-2012 motor controller
# 	
#	$Date: 2019/12/12 23:52:58 $
#   $Id: mdc660004.proto,v 1.3 2019/12/12 23:52:58 adangelo Exp $
#   $Log: mdc660004.proto,v $
#   Revision 1.3  2019/12/12 23:52:58  adangelo
#   added more functionality
#
#   Revision 1.2  2019/12/12 19:42:58  adangelo
#   tags
#
#	$Revision: 1.3 $
#

InTerminator = CR;
OutTerminator = CR;
ExtraInput = Ignore;

# LockTimeout should be GT ReplyTimeout
LockTimeout  = 1000;
ReplyTimeout = 500;
ReadTimeout  = 100;

# $1 = $(ADDR) macro in symbol

# Initialize the motor (sets encoder to zero)
# This needs to be done before it will move
INIT {
  OUT ":\$1i%d";
}

# Set the address for the motor (0 is default)
SETADDR {
  OUT ":0D%d";
}

# Send motor to negative limit. Needs limit SW
# or defaults to hard stop when reached.
HOME {
  OUT ":\$1j-10000000";
}

# Read step position
RDSTEPPOS {
	OUT ":\$1p";
	IN ":\$1p%d";
}

# Read encoder position
RDENCPOS {
	OUT ":\$1y";
	IN ":\$1y%d";
}

# Stop motion (hard stop)
STOP {
	OUT ":\$1h1";
}

# Motor Status________
# Returns :abxy where:
# a = address
# b = 'g'
# x = 1 = motor running
# x = 0 = motor stopped/finished
# y = motor status:
#	0 = motor ready
#	1 = motor not homed
#	2 = motor not initialized
#	3 = motor error
AXISSTATUS {
	OUT ":\$1g";
	IN ":\$1g%d";
}

# Read speed setting
RDSPD {
	OUT ":\$1s";
	IN ":\$1s%d";
}

# Read acceleration setting
RDACCL {
	OUT ":\$1a";
	IN ":\$1a%d";
}

# Set holding current
SETHCUR {
	OUT ":\$1H%d";
}

# Set run current
SETRCUR {
	OUT ":\$1R%d";
}

# Set allowable error before faulting
MAXERR {
	OUT ":\$1L%d";
}

# Go to position
SETPOS {
	OUT ":\$1p%d";
}	

# Set acceleration
SETACCL {
	OUT ":\$1a%d";
}

# Set speed
SETSPD {
	OUT ":\$1S%d";
}

# Read step size setting
RDSTEPSIZE {
	OUT ":\$1E";
	IN ":\$1E%d";
}

# Jog in positive direction
JOGPOS {
	OUT ":\$1j%f";
}

# Jog in negative direction
JOGNEG {
	OUT ":\$1j-%f";
}

# Give specified command
CMDOUT {
	OUT "%s";
	IN "%(DESC)s";
}
